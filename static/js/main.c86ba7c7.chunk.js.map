{"version":3,"sources":["components/SingleJoke/SingleJoke.js","components/ListItem/ListItem.js","components/List/List.js","App.js","serviceWorker.js","index.js"],"names":["singleJoke","props","react_default","a","createElement","className","joke","src","height","listItem","NavLink","to","onClick","onSingleClicked","item","List","state","gotJokes","loadingState","clicked","category","_this2","this","setState","x","loadMoreItems","refs","iScroll","addEventListener","scrollTop","clientHeight","scrollHeight","_this3","window","onpopstate","e","nextProps","_this4","fetch","undefined","then","response","json","data","prevState","concat","Object","toConsumableArray","value","_this5","jokesList","map","index","ListItem_ListItem","key","content","SingleJoke_SingleJoke","ref","Route","path","Component","App","categories","handleCategoryClick","_this","categoriesOutput","cat","catClass","components_List_List","Boolean","location","hostname","match","app","BrowserRouter","src_App_0","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c86ba7c7.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SingleJoke.css';\r\n\r\n//Single joke when isolated\r\nconst singleJoke = (props) => {\r\n\r\n    return (\r\n\r\n        <div className='container'>\r\n            <div className='row'>\r\n                <div className='col-md-6'>\r\n                    <h3 className='jokeText'>{props.joke}</h3>\r\n                </div>\r\n                <div className='col-md-6'>\r\n\r\n                    <img src='./chuck-norris-jokes/images/chuck-norris.jpg' className=\"rounded mx-auto d-block\" height=\"300\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default singleJoke;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport './ListItem.css';\r\n\r\n//One item in the feed of jokes\r\nconst listItem = (props) => {\r\n    return (\r\n        <NavLink to='/joke' onClick={props.onSingleClicked}>\r\n            <li className='list-group-item list-group-item-action listItem'>\r\n                {props.item}\r\n            </li>\r\n        </NavLink>\r\n    )\r\n}\r\n\r\nexport default listItem;","import React, { Component } from 'react';\r\nimport SingleJoke from '../SingleJoke/SingleJoke';\r\nimport ListItem from '../ListItem/ListItem';\r\nimport { Route } from 'react-router-dom';\r\nimport './List.css'\r\n\r\nclass List extends Component {\r\n    state = {\r\n        gotJokes: [],\r\n        loadingState: false,\r\n        clicked: '',\r\n        category:''\r\n    }\r\n\r\n    //Fetches jokes and saves them to state\r\n    componentDidMount() {\r\n        this.setState({category:this.props.category})\r\n        for (let x = 0; x < 10; x++) {\r\n            this.loadMoreItems();\r\n        }\r\n        //Adds eventListener for the joke feed to load more when scrolled to bottom\r\n        this.refs.iScroll.addEventListener(\"scroll\", () => {\r\n            if (this.refs.iScroll.scrollTop + this.refs.iScroll.clientHeight >= this.refs.iScroll.scrollHeight) {\r\n                this.loadMoreItems();\r\n            }\r\n        });\r\n    }\r\n    //listens for the back-button click to redirect to main feed after viewing isolated joke.\r\n    componentDidUpdate() {\r\n        window.onpopstate = (e) => {\r\n            this.setState({clicked:''});\r\n            this.refs.iScroll.addEventListener(\"scroll\", () => {\r\n                if (this.refs.iScroll.scrollTop + this.refs.iScroll.clientHeight >= this.refs.iScroll.scrollHeight) {\r\n                    this.loadMoreItems();\r\n                }\r\n            });\r\n        }\r\n        \r\n\r\n    }\r\n\r\n    //Listens for change of category which is sent as props from parent App.js\r\n    componentWillReceiveProps(nextProps) {\r\n        if(this.state.category !== nextProps.category){\r\n            this.setState({gotJokes:[], category:nextProps.category})\r\n\r\n            for (let x = 0; x < 10; x++) {\r\n\r\n                this.loadMoreItems(nextProps.category);\r\n            }\r\n        } \r\n    } \r\n\r\n    //function to load another joke based on the current category stored in state\r\n    loadMoreItems(category) {\r\n        this.setState({ loadingState: true });\r\n        let uri = (category==='' || category===undefined? '' : '?category='+category)\r\n        fetch('https://api.chucknorris.io/jokes/random'+uri)\r\n            .then(response => response.json())\r\n            .then(data => this.setState(prevState => ({\r\n                gotJokes: [...prevState.gotJokes, data.value],\r\n                loadingState: false\r\n            })))\r\n    }\r\n\r\n    onSingleClicked(item) {\r\n        this.setState({ clicked: item });\r\n    }\r\n\r\n    render() {\r\n        \r\n        //maps all jokes stored in state to display\r\n        let jokesList = this.state.gotJokes.map((item,index) => {\r\n            return <ListItem key={index} onSingleClicked={() => { this.onSingleClicked(item) }} item={item} />\r\n        })\r\n\r\n        //conditional that decides to display a single joke or the feed\r\n        const content = (this.state.clicked !== '' ?\r\n                <SingleJoke joke={this.state.clicked} />:\r\n            <div ref=\"iScroll\" className='List-scroll'>\r\n                <ul className='list-group'>\r\n                    {jokesList}\r\n                </ul>\r\n                {this.state.loadingState ? <p className=\"loading\"> loading Chuck Norris {this.state.category} jokes</p> : \"\"}\r\n            </div>)\r\n\r\n        return (\r\n            <div className='container'>\r\n                <Route path='/joke'  />\r\n                {content}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default List;","import React, { Component } from 'react';\nimport './App.css';\nimport List from './components/List/List'\n\nclass App extends Component {\n  state = {\n    categories: ['random'],\n    category: '',\n  }\n\n  //Fetch categories from chuck norris API\n  componentDidMount() {\n    fetch('https://api.chucknorris.io/jokes/categories')\n      .then(response => response.json())\n      .then(data => this.setState({ categories: data }))\n  }\n\n  handleCategoryClick = (category) => {\n    this.setState({ category: category })\n  }\n\n\n  render() {\n\n    //Maps and displays the catgories stored in state \n    let categoriesOutput = this.state.categories.map(cat => {\n      let catClass = ((cat === this.state.category) ? 'btn btn-primary cat-btn active' : 'btn btn-primary cat-btn')\n      return (\n        <li\n          className={catClass}\n          onClick={() => { this.handleCategoryClick(cat) }} key={cat}>\n          {cat}\n        </li>)\n    })\n\n    return (\n      <div >\n        <div className='App'>\n          <h1>I heard you like Chuck Norris jokes</h1>\n          <ul>\n            {categoriesOutput}\n          </ul>\n        </div>\n        <List category={this.state.category} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom'\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst app = (\n    <BrowserRouter>\n        <App /> \n    </BrowserRouter>\n)\n\n\nReactDOM.render(app, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}